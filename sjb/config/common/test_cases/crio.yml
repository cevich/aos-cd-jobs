---
parameters:
  - name: BUILD_ID
    description: "Unique build number for each run."
  - name: REPO_OWNER
    description: "GitHub org that triggered the job."
  - name: REPO_NAME
    description: "GitHub repo that triggered the job."
  - name: PULL_BASE_REF
    description: "Ref name of the base branch."
  - name: PULL_BASE_SHA
    description: "Git SHA of the base branch."
  - name: PULL_REFS
    description: "All refs to test."
  - name: PULL_NUMBER
    description: "Pull request number."
  - name: PULL_PULL_SHA
    description: "Pull request head SHA."
  - name: JOB_SPEC
    description: "JSON form of job specification."
actions:
  - type: "host_script"
    title: "upload GCS starting metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/
      if [[ -n "${REPO_OWNER:-}" ]]; then
        cat <<STARTED >gcs/started.json
        {
          "timestamp": $( date +%s ),
          "pull": "${PULL_REFS}",
          "repos": {
            "${REPO_OWNER}/${REPO_NAME}": "${PULL_REFS}"
          }
        }
      STARTED
      else
        cat <<STARTED >gcs/started.json
        {
          "timestamp": $( date +%s )
        }
      STARTED
      fi

      if [[ "$( jq --compact-output ".buildid" <<<"${JOB_SPEC}" )" =~ ^\"[0-9]+\"$ ]]; then
        echo "Keeping BUILD_ID"
        BUILD="${BUILD_ID}"
      else
        echo "Using BUILD_NUMBER"
        BUILD="${BUILD_NUMBER}"
      fi

      bucket="gs://origin-federated-results/"
      suffix="${JOB_NAME}/${BUILD}/"
      if [[ -n "${REPO_OWNER:-}" ]]; then
        segment="${REPO_OWNER}_${REPO_NAME}/"
        if [[ -n "${PULL_NUMBER:-}" ]]; then
          prefix="pr-logs/pull/"
          segment="${segment:-}${PULL_NUMBER}/"
        else
          if [[ "${PULL_REFS}" =~ ^[^:]+:[^:]+(,[^:]+:[^:]+){2,} ]]; then
            prefix="pr-logs/pull/batch/"
          else
            prefix="logs/"
          fi
        fi
      else
        prefix="logs/"
      fi

      path="${bucket}${prefix}${segment:-}${suffix}"
      gsutil cp gcs/started.json "${path}started.json"
      if [[ -n "${PULL_NUMBER:-}" ]]; then
        echo "${path%\/}" > "${BUILD}.txt"
        gsutil cp "${BUILD}.txt" "gs://origin-federated-results/pr-logs/directory/${JOB_NAME}/${BUILD}.txt"
      fi
      echo ${BUILD} > latest-build.txt
      job_type="$( jq --compact-output ".type" <<<"${JOB_SPEC}" )"
      if [[ $job_type =~ "presubmit" || $job_type =~ "batch" ]]; then
        gsutil cp latest-build.txt "gs://origin-ci-test/pr-logs/directory/${JOB_NAME}/latest-build.txt"
      elif [[ $job_type =~ "postsubmit" || $job_type =~ "periodic" ]]; then
        gsutil cp latest-build.txt "gs://origin-ci-test/logs/${JOB_NAME}/latest-build.txt"
      else
        echo "Bad job type provided in JOB_SPEC: $job_type"
      fi
post_actions:
  - type: "host_script"
    title: "Produce and Retrieve artifacts from sequence of commands"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      DESTDIR="${WORKSPACE}/artifacts/generated"
      set +e
      SSH="ssh -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config openshiftdevel"
      mkdir -p "$DESTDIR"
      $SSH 'sudo yum list installed' &> "$DESTDIR/installed_packages.log"
      $SSH 'sudo ausearch -m AVC -m SELINUX_ERR -m USER_AVC' &> "$DESTDIR/avc_denials.log"
      $SSH 'sudo journalctl _PID=1 --no-pager --all --lines=all' &> "$DESTDIR/pid1.journal"
      $SSH 'sudo journalctl --no-pager --boot' &> "$DESTDIR/system.journal"
      $SSH 'sudo df -h' &> "$DESTDIR/filesystem.info"
      $SSH 'sudo pvs' &>> "$DESTDIR/filesystem.info"
      $SSH 'sudo vgs' &>> "$DESTDIR/filesystem.info"
      $SSH 'sudo lvs' &>> "$DESTDIR/filesystem.info"
  - type: "host_script"
    title: "assemble GCS output"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/artifacts gcs/artifacts/generated gcs/artifacts/journals gcs/artifacts/gathered
      result=$( python -c "import json; import urllib; print json.load(urllib.urlopen('${BUILD_URL}api/json'))['result']" )
      cat <<FINISHED >gcs/finished.json
      {
        "timestamp": $( date +%s ),
        "result": "${result}"
      }
      FINISHED
      cat "/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log" > gcs/build-log.txt
      cp -r artifacts/gathered/* gcs/artifacts/ || true
      cp artifacts/generated/* gcs/artifacts/generated/ || true
      cp artifacts/journals/* gcs/artifacts/journals/ || true
      scp -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config -r "$( pwd )/gcs" openshiftdevel:/data
      scp -F ${WORKSPACE}/.config/origin-ci-tool/inventory/.ssh_config /var/lib/jenkins/.config/gcloud/gcs-publisher-credentials.json openshiftdevel:/data/credentials.json
  - type: "script"
    title: "push the artifacts and metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      if [[ -n "${JOB_SPEC:-}" ]]; then
        if [[ "$( jq --compact-output ".buildid" <<<"${JOB_SPEC}" )" =~ ^\"[0-9]+\"$ ]]; then
          echo "Keeping BUILD_ID"
        else
          echo "Using BUILD_NUMBER"
          JOB_SPEC="$( jq --compact-output ".buildid |= \"${BUILD_NUMBER}\"" <<<"${JOB_SPEC}" )"
        fi
        docker run -e JOB_SPEC="${JOB_SPEC}" -v "/data:/data:z" registry.svc.ci.openshift.org/ci/gcsupload:latest --dry-run=false --gcs-path=gs://origin-federated-results --gcs-credentials-file=/data/credentials.json /data/gcs/*
      fi
artifacts:
  - /go/src/k8s.io/kubernetes/artifacts
  - /go/src/k8s.io/kubernetes/e2e.log
  - /go/src/github.com/kubernetes-incubator/cri-o/testout.txt
  - /go/src/github.com/kubernetes-incubator/cri-o/reports
  - /tmp/kubelet.log
  - /tmp/kube-apiserver.log
  - /tmp/kube-controller-manager.log
  - /tmp/kube-proxy.log
  - /tmp/kube-proxy.yaml
  - /tmp/kube-scheduler.log
  - /etc/crio/crio.conf
system_journals:
  - crio.service
  - customcluster.service
  - systemd-journald.service
